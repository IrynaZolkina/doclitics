"use client";
import { Geist, Geist_Mono, Inter, Roboto, Manrope } from "next/font/google";
import "./globals.css";

import { ReduxProvider } from "../redux/Providers";
import Footer from "@/components/Footer";
import Header from "@/components/Header";
// import ToastContainer from "@/components-ui/ToastContainer";

import ToastManual from "@/components-ui/ToastManual";
import ToastSuper from "@/components-ui/ToastSuper";
import PopupLogin from "@/components/PopupLogin";

const manrope = Manrope({
  subsets: ["latin"],
  weight: ["400", "500", "600", "700"], // choose what you need
  variable: "--font-manrope",
});

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});
const inter = Inter({
  variable: "--font-inter",
  subsets: ["latin"],
});

const roboto = Roboto({
  variable: "--font-roboto",
  subsets: ["latin"],
});

// export const metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export default function RootLayout({ children }) {
  // const pathname = usePathname();
  // const [displayChildren, setDisplayChildren] = useState(children);
  // const [fade, setFade] = useState(true);

  // useEffect(() => {
  //   const fetchCurrentUser = async () => {
  //     // Call protected route; credentials include HttpOnly cookie automatically
  //     try {
  //       const res = await apiFetch("/api/auth/me", {
  //         method: "GET",
  //         credentials: "include",
  //       });
  //       // apiFetch may return undefined if refresh failed
  //       if (!res) return;
  //       console.log("UserLoader /api/auth/me response: ", res);
  //       // const data = await res.json();
  //       const result = await res.json();

  //       if (!result.success) {
  //         //console.error(result.error.message);
  //         // optional toast, depends if you want UX feedback on failed auth
  //         // toastSuperFunction(result.error.message, "error");
  //         //toastSuperFunction(result.error.message, "error");
  //         return;
  //       }
  //       const { user } = result.data;

  //       dispatch(
  //         setUserLogin({
  //           username: user.username,
  //           email: user.email,
  //           userCategory: user.category,
  //           picture: user.picture || "",
  //         })
  //       );
  //     } catch (err) {
  //       toastSuperFunctionJS("Failed to fetch user:", err);
  //       //console.error("Ã·Failed to fetch user:", err);
  //     }
  //   };

  //   fetchCurrentUser();
  // }, [dispatch]);

  return (
    <html lang="en" className="test">
      <body
        className={`${geistSans.variable} ${geistMono.variable} ${inter.variable} ${roboto.variable} ${manrope.variable} `}
      >
        <ReduxProvider>
          {/* Client-only wrapper for Redux + user fetch */}
          {/* <UserLoader /> */}
          <div className="page-wrapper">
            <Header />
            {children}
            <Footer />
            {/* <ToastContainer /> */}
            <ToastManual />
            <ToastSuper />
            <PopupLogin />
          </div>
        </ReduxProvider>
      </body>
    </html>
  );
}
